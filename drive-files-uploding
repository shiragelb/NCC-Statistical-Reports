
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shiragelb/NCC-Statistical-Reports/blob/main/pipeline.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A7YhVwOoDX44",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fe4de51b-7d8b-4c7e-9a68-5094d9f70843"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, world!\n",
            "change\n"
          ]
        }
      ],
      "source": [
        "print('Hello, world!')\n",
        "print('change')"
      ],
      "id": "A7YhVwOoDX44"
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pdfplumber\n",
        "!pip install camelot-py[cv]\n",
        "!pip install tabula-py\n",
        "!pip install python-docx"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Md13rOWPyd0",
        "outputId": "f77ce2df-71ee-4134-a0e1-446e82e3df00"
      },
      "id": "9Md13rOWPyd0",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pdfplumber in /usr/local/lib/python3.12/dist-packages (0.11.7)\n",
            "Requirement already satisfied: pdfminer.six==20250506 in /usr/local/lib/python3.12/dist-packages (from pdfplumber) (20250506)\n",
            "Requirement already satisfied: Pillow>=9.1 in /usr/local/lib/python3.12/dist-packages (from pdfplumber) (11.3.0)\n",
            "Requirement already satisfied: pypdfium2>=4.18.0 in /usr/local/lib/python3.12/dist-packages (from pdfplumber) (4.30.0)\n",
            "Requirement already satisfied: charset-normalizer>=2.0.0 in /usr/local/lib/python3.12/dist-packages (from pdfminer.six==20250506->pdfplumber) (3.4.3)\n",
            "Requirement already satisfied: cryptography>=36.0.0 in /usr/local/lib/python3.12/dist-packages (from pdfminer.six==20250506->pdfplumber) (43.0.3)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.12/dist-packages (from cryptography>=36.0.0->pdfminer.six==20250506->pdfplumber) (1.17.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.12/dist-packages (from cffi>=1.12->cryptography>=36.0.0->pdfminer.six==20250506->pdfplumber) (2.22)\n",
            "Collecting camelot-py[cv]\n",
            "  Downloading camelot_py-1.0.9-py3-none-any.whl.metadata (9.8 kB)\n",
            "\u001b[33mWARNING: camelot-py 1.0.9 does not provide the extra 'cv'\u001b[0m\u001b[33m\n",
            "\u001b[0mRequirement already satisfied: click>=8.0.1 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (8.2.1)\n",
            "Requirement already satisfied: chardet>=5.1.0 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (5.2.0)\n",
            "Requirement already satisfied: numpy>=1.26.1 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (2.0.2)\n",
            "Requirement already satisfied: openpyxl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (3.1.5)\n",
            "Requirement already satisfied: pdfminer-six>=20240706 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (20250506)\n",
            "Collecting pypdf<6.0,>=4.0 (from camelot-py[cv])\n",
            "  Downloading pypdf-5.9.0-py3-none-any.whl.metadata (7.1 kB)\n",
            "Requirement already satisfied: pandas>=2.2.2 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (2.2.2)\n",
            "Requirement already satisfied: tabulate>=0.9.0 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (0.9.0)\n",
            "Requirement already satisfied: opencv-python-headless>=4.7.0.68 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (4.12.0.88)\n",
            "Requirement already satisfied: pypdfium2>=4 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (4.30.0)\n",
            "Requirement already satisfied: pillow>=10.4.0 in /usr/local/lib/python3.12/dist-packages (from camelot-py[cv]) (11.3.0)\n",
            "Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.12/dist-packages (from openpyxl>=3.1.0->camelot-py[cv]) (2.0.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas>=2.2.2->camelot-py[cv]) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas>=2.2.2->camelot-py[cv]) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas>=2.2.2->camelot-py[cv]) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer>=2.0.0 in /usr/local/lib/python3.12/dist-packages (from pdfminer-six>=20240706->camelot-py[cv]) (3.4.3)\n",
            "Requirement already satisfied: cryptography>=36.0.0 in /usr/local/lib/python3.12/dist-packages (from pdfminer-six>=20240706->camelot-py[cv]) (43.0.3)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.12/dist-packages (from cryptography>=36.0.0->pdfminer-six>=20240706->camelot-py[cv]) (1.17.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas>=2.2.2->camelot-py[cv]) (1.17.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.12/dist-packages (from cffi>=1.12->cryptography>=36.0.0->pdfminer-six>=20240706->camelot-py[cv]) (2.22)\n",
            "Downloading pypdf-5.9.0-py3-none-any.whl (313 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m313.2/313.2 kB\u001b[0m \u001b[31m18.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading camelot_py-1.0.9-py3-none-any.whl (66 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m66.8/66.8 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pypdf, camelot-py\n",
            "Successfully installed camelot-py-1.0.9 pypdf-5.9.0\n",
            "Collecting tabula-py\n",
            "  Downloading tabula_py-2.10.0-py3-none-any.whl.metadata (7.6 kB)\n",
            "Requirement already satisfied: pandas>=0.25.3 in /usr/local/lib/python3.12/dist-packages (from tabula-py) (2.2.2)\n",
            "Requirement already satisfied: numpy>1.24.4 in /usr/local/lib/python3.12/dist-packages (from tabula-py) (2.0.2)\n",
            "Requirement already satisfied: distro in /usr/local/lib/python3.12/dist-packages (from tabula-py) (1.9.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas>=0.25.3->tabula-py) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas>=0.25.3->tabula-py) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas>=0.25.3->tabula-py) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas>=0.25.3->tabula-py) (1.17.0)\n",
            "Downloading tabula_py-2.10.0-py3-none-any.whl (12.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.0/12.0 MB\u001b[0m \u001b[31m88.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: tabula-py\n",
            "Successfully installed tabula-py-2.10.0\n",
            "Collecting python-docx\n",
            "  Downloading python_docx-1.2.0-py3-none-any.whl.metadata (2.0 kB)\n",
            "Requirement already satisfied: lxml>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from python-docx) (5.4.0)\n",
            "Requirement already satisfied: typing_extensions>=4.9.0 in /usr/local/lib/python3.12/dist-packages (from python-docx) (4.15.0)\n",
            "Downloading python_docx-1.2.0-py3-none-any.whl (252 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m253.0/253.0 kB\u001b[0m \u001b[31m16.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: python-docx\n",
            "Successfully installed python-docx-1.2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "import os\n",
        "from docx import Document\n",
        "import pandas as pd\n",
        "from google.colab import files\n",
        "import camelot\n",
        "import tabula\n",
        "import pdfplumber\n",
        "from docx.shared import Inches # Import Inches for setting image size\n",
        "\n",
        "def process_file_from_url(url, year):\n",
        "    \"\"\"\n",
        "    Downloads a file from a URL, processes it, extracts tables from DOCX,\n",
        "    saves them as CSVs, and stores metadata.\n",
        "\n",
        "    Args:\n",
        "        url (str): The URL of the file.\n",
        "        year (int): The year to include in the CSV filenames.\n",
        "\n",
        "    Returns:\n",
        "        dict: A dictionary mapping original table topics to their new filenames.\n",
        "    \"\"\"\n",
        "    # Step 2: Download the file\n",
        "    local_filename = url.split('/')[-1]\n",
        "    print(f\"Downloading {url} to {local_filename}\")\n",
        "    try:\n",
        "        with requests.get(url, stream=True) as r:\n",
        "            r.raise_for_status()\n",
        "            with open(local_filename, 'wb') as f:\n",
        "                for chunk in r.iter_content(chunk_size=8192):\n",
        "                    f.write(chunk)\n",
        "        print(\"Download complete.\")\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"Error downloading file: {e}\")\n",
        "        return {}\n",
        "\n",
        "\n",
        "    # Step 3: Determine file type and convert if necessary\n",
        "    file_extension = os.path.splitext(local_filename)[1].lower()\n",
        "    docx_path = local_filename\n",
        "\n",
        "    if file_extension == '.pdf':\n",
        "        print(f\"Detected PDF file. Attempting to convert {local_filename} to DOCX.\")\n",
        "        try:\n",
        "            # Basic PDF to DOCX conversion using pdfplumber\n",
        "            # This will extract text but may not preserve formatting or tables accurately.\n",
        "            # For better results, consider using libraries like 'pdf2docx' or external services.\n",
        "            docx_path = local_filename + \".docx\"\n",
        "            document = Document()\n",
        "            with pdfplumber.open(local_filename) as pdf:\n",
        "                for page in pdf.pages:\n",
        "                    text = page.extract_text()\n",
        "                    if text:\n",
        "                        document.add_paragraph(text)\n",
        "            document.save(docx_path)\n",
        "            print(f\"Conversion to DOCX complete: {docx_path}\")\n",
        "        except Exception as e:\n",
        "            print(f\"Error converting PDF to DOCX: {e}\")\n",
        "            print(\"Proceeding with the original file assuming it might be parsable by a DOCX reader or skipping table extraction.\")\n",
        "            # If conversion fails, we might not be able to extract tables reliably.\n",
        "            # Depending on requirements, you might want to return here or handle this case differently.\n",
        "\n",
        "\n",
        "    elif file_extension == '.docx':\n",
        "        print(f\"Detected DOCX file: {local_filename}\")\n",
        "        pass # File is already DOCX, no conversion needed\n",
        "    else:\n",
        "        print(f\"Unsupported file type: {file_extension}. Skipping table extraction.\")\n",
        "        return {} # Return empty dictionary for unsupported types\n",
        "\n",
        "\n",
        "    # Step 4: Extract tables from DOCX\n",
        "    tables = []\n",
        "    if os.path.exists(docx_path):\n",
        "      try:\n",
        "          tables = extract_tables_from_docx(docx_path)\n",
        "          print(f\"Extracted {len(tables)} tables from {docx_path}\")\n",
        "      except Exception as e:\n",
        "          print(f\"Error extracting tables from DOCX: {e}\")\n",
        "          return {}\n",
        "    else:\n",
        "      print(f\"DOCX file not found at {docx_path}. Skipping table extraction.\")\n",
        "      return {}\n",
        "\n",
        "\n",
        "    # Step 5: Save tables as CSV and store metadata\n",
        "    table_metadata = {}\n",
        "    for i, table in enumerate(tables, 1):\n",
        "        # Placeholder for extracting original table topic\n",
        "        # This is highly dependent on the document structure and might require\n",
        "        # more advanced parsing or heuristics.\n",
        "        original_topic = f\"Table {i}\" # Using a placeholder for now\n",
        "\n",
        "        csv_filename = f\"{i}-{year}.csv\"\n",
        "        table.to_csv(csv_filename, index=False)\n",
        "        table_metadata[original_topic] = csv_filename\n",
        "        print(f\"Saved table {i} to {csv_filename}\")\n",
        "\n",
        "    # Step 6: Return the dictionary\n",
        "    return table_metadata\n",
        "\n",
        "def extract_tables_from_docx(docx_path):\n",
        "    \"\"\"\n",
        "    Extracts tables from a DOCX file.\n",
        "\n",
        "    Args:\n",
        "        docx_path (str): The path to the DOCX file.\n",
        "\n",
        "    Returns:\n",
        "        list: A list of pandas DataFrames, where each DataFrame represents a table.\n",
        "    \"\"\"\n",
        "    doc = Document(docx_path)\n",
        "    tables = []\n",
        "\n",
        "    for table in doc.tables:\n",
        "        data = []\n",
        "        for row in table.rows:\n",
        "            data.append([cell.text.strip() for cell in row.cells])\n",
        "        if data: # Ensure table is not empty\n",
        "            df = pd.DataFrame(data)\n",
        "            tables.append(df)\n",
        "    return tables\n",
        "\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive\")\n",
        "os.chdir('content/drive/Shareddrives/')\n",
        "\n",
        "# Example usage (You can uncomment and modify this to test)\n",
        "url = pdf_path # Replace with the actual file URL\n",
        "year = 2024 # Replace with the desired year\n",
        "extracted_info = process_file_from_url(url, year)\n",
        "print(\"\\nExtracted Information:\")\n",
        "print(extracted_info)"
      ],
      "metadata": {
        "id": "1Q5nm6WiPzlr"
      },
      "id": "1Q5nm6WiPzlr",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
